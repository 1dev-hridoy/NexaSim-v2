//do not edit this file, it will get server info only
//add new things via html
document.addEventListener('DOMContentLoaded', function() {

    const cards = document.querySelectorAll('.info-card, .card-glow');
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.opacity = '1';
                entry.target.style.transform = 'translateY(0)';
            }
        });
    });

    cards.forEach(card => {
        card.style.opacity = '0';
        card.style.transform = 'translateY(20px)';
        card.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
        observer.observe(card);
    });


    let fetchTime = Date.now();
    let uptimeBase = 0; 
    let uptimeElem = null;

    function parseUptime(str) {
     
        const m = str.match(/(\d+)d\s+(\d+)h\s+(\d+)m\s+(\d+)s/);
        if (!m) return 0;
        return (+m[1])*86400 + (+m[2])*3600 + (+m[3])*60 + (+m[4]);
    }
    function formatUptime(sec) {
        const d = Math.floor(sec / 86400);
        sec %= 86400;
        const h = Math.floor(sec / 3600);
        sec %= 3600;
        const m = Math.floor(sec / 60);
        const s = sec % 60;
        return `${d}d ${h}h ${m}m ${s}s`;
    }

    function updateUptime() {
        if (uptimeElem && uptimeBase !== null) {
    
            const elapsed = Math.floor((Date.now() - fetchTime) / 1000);
            uptimeElem.textContent = formatUptime(uptimeBase + elapsed);
        }
    }

    function setProfileData(data) {
 
        const avatarImg = document.querySelector('.avatar-glow');
        if (avatarImg && data.avatar) {
            avatarImg.src = data.avatar;
        }

        document.querySelector('h2').textContent = data.botName || 'Bot';
        document.querySelector('.text-gray-300.text-lg.mb-4').textContent = data.description || '';
       
        document.querySelector('.text-2xl.font-mono.text-blue-400').textContent = data.prefix || '!';
  
        document.querySelector('.text-xl.font-semibold.text-purple-400.mb-1').textContent = data.ownerName || '-';
   
        document.querySelector('.text-xl.font-semibold.text-green-400.mb-1').textContent = data.language || '';

        uptimeElem = document.querySelector('.text-xl.font-bold.text-cyan-400.mb-1');
        uptimeElem.textContent = data.uptime || '0d 0h 0m 0s';
        uptimeBase = parseUptime(data.uptime || '0d 0h 0m 0s');

        let ownerCard = document.querySelectorAll('.info-card')[1];
        if (ownerCard && !ownerCard.querySelector('.threads-users')) {
            let tu = document.createElement('div');
            tu.className = 'threads-users text-gray-400 text-xs mt-2';
            tu.innerHTML = `
                <span>Total Threads: <span class="font-bold text-blue-300">${data.totalThreads}</span></span> | 
                <span>Total Users: <span class="font-bold text-green-300">${data.totalUsers}</span></span>
            `;
            ownerCard.appendChild(tu);
        }
 
        let stats = data.serverStats || {};
        let extraStats = document.querySelector('.extra-stats');
        if (!extraStats) {
            extraStats = document.createElement('div');
            extraStats.className = 'extra-stats mt-8 flex flex-wrap gap-4 justify-center';
            extraStats.innerHTML = `
                <div class="px-4 py-2 rounded-lg bg-slate-800/60 text-sm text-gray-200"><i class="fas fa-memory text-blue-400 mr-1"></i>Memory: <span class="stat-mem">${stats.memory || '0.00'}</span>%</div>
                <div class="px-4 py-2 rounded-lg bg-slate-800/60 text-sm text-gray-200"><i class="fas fa-microchip text-green-400 mr-1"></i>CPU: <span class="stat-cpu">${stats.cpu || '0.00'}</span>%</div>
                <div class="px-4 py-2 rounded-lg bg-slate-800/60 text-sm text-gray-200"><i class="fas fa-hdd text-purple-400 mr-1"></i>Disk: <span class="stat-disk">${stats.disk || '0.00'}</span>%</div>
                <div class="px-4 py-2 rounded-lg bg-slate-800/60 text-sm text-gray-200"><i class="fas fa-network-wired text-yellow-400 mr-1"></i>Network: <span class="stat-net">${stats.network || '0.00'}</span>%</div>
            `;
            document.querySelector('.max-w-4xl.mx-auto').appendChild(extraStats);
        } else {
            extraStats.querySelector('.stat-mem').textContent = stats.memory || '0.00';
            extraStats.querySelector('.stat-cpu').textContent = stats.cpu || '0.00';
            extraStats.querySelector('.stat-disk').textContent = stats.disk || '0.00';
            extraStats.querySelector('.stat-net').textContent = stats.network || '0.00';
        }
    }

    function loadApiData() {
        fetchTime = Date.now();
        fetch('/api/bot')
            .then(r => r.json())
            .then(data => {
                setProfileData(data);
                if (window.__uptimeInt) clearInterval(window.__uptimeInt);
                window.__uptimeInt = setInterval(updateUptime, 60000);
            }).catch(e => {
                console.error('Failed to fetch bot info', e);
            });
    }

    loadApiData();
});